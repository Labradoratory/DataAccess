<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Labradoratory.DataAccess</name>
    </assembly>
    <members>
        <member name="T:Labradoratory.DataAccess.Controllers.EntityDataAccessController`2">
            <summary>
            
            </summary>
            <typeparam name="TEntity">The type of entity the controller manages.</typeparam>
            <typeparam name="TView">The view respresentation of the entity to provided clients.</typeparam>
        </member>
        <member name="M:Labradoratory.DataAccess.Controllers.EntityDataAccessController`2.#ctor(Labradoratory.DataAccess.IDataAccess{`0},AutoMapper.IMapper)">
            <summary>
            Initializes the <see cref="!:EntityDataAccessController"/> base class.
            </summary>
            <param name="dataAccess">The data accessor to use to manipulate <typeparamref name="TEntity"/> objects.</param>
            <param name="mapper">
            The mapper to use for object conversion.  The <see cref="T:AutoMapper.IMapper"/> should support transformation
            between <typeparamref name="TEntity"/> and <typeparamref name="TView"/>, both directions.
            </param>
        </member>
        <member name="P:Labradoratory.DataAccess.Controllers.EntityDataAccessController`2.DataAccess">
            <summary>
            Gets the data access instance for <typeparamref name="TEntity"/>.
            </summary>
        </member>
        <member name="P:Labradoratory.DataAccess.Controllers.EntityDataAccessController`2.Mapper">
            <summary>
            Gets the object conversion mapper.
            </summary>
        </member>
        <member name="M:Labradoratory.DataAccess.Controllers.EntityDataAccessController`2.GetAll(System.Threading.CancellationToken)">
            <summary>
            Gets all of the entities.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns></returns>
        </member>
        <member name="M:Labradoratory.DataAccess.Controllers.EntityDataAccessController`2.CheckAllowGetAsync(System.Threading.CancellationToken)">
            <summary>
            Checks whether or not the get operation is allowed.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>The task that will contain the results.  TRUE, the get operation is allowed; Otherwise, FALSE.</returns>
        </member>
        <member name="M:Labradoratory.DataAccess.Controllers.EntityDataAccessController`2.Add(`1,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns></returns>
        </member>
        <member name="M:Labradoratory.DataAccess.Controllers.EntityDataAccessController`2.CheckAllowAddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Checks whether or not the add operation is allowed.
            </summary>
            <param name="entity">The entity being added.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>The task that will contain the results.  TRUE, the add operation is allowed; Otherwise, FALSE.</returns>
        </member>
        <member name="M:Labradoratory.DataAccess.Controllers.EntityDataAccessController`2.Update(System.Object[],Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{`1},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="keys"></param>
            <param name="patch"></param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns></returns>
        </member>
        <member name="M:Labradoratory.DataAccess.Controllers.EntityDataAccessController`2.CheckAllowUpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Checks whether or not the update operation is allowed.
            </summary>
            <param name="entity">The entity being updated.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>The task that will contain the results.  TRUE, the update operation is allowed; Otherwise, FALSE.</returns>
        </member>
        <member name="M:Labradoratory.DataAccess.Controllers.EntityDataAccessController`2.Delete(System.Object[],System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="keys"></param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns></returns>
        </member>
        <member name="M:Labradoratory.DataAccess.Controllers.EntityDataAccessController`2.CheckAllowDeleteAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Checks whether or not the delete operation is allowed.
            </summary>
            <param name="entity">The entity being deleted.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>The task that will contain the results.  TRUE, the delete operation is allowed; Otherwise, FALSE.</returns>
        </member>
    </members>
</doc>
